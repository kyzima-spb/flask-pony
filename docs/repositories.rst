.. _repositories:

Repositories
============

``Flask-Pony`` реализует шаблон проектирования Repository_:

    **Репозиторий** - посредник между уровнями области определения и распределения данных,
    использует интерфейс, схожий с коллекциями для доступа к объектам области определения.

    **Область определения** - это само хранилище или доменная модель.

    **Область распределения** - это `Data Mapper`_.

    -- Martin Fowler

Пока что это лишь самая простая реализация данного шаблона: :py:class:`~flask_pony.repositories.PonyRepository`

В первую очередь репозитории нужны для работы с HTML-формами.
Благодаря им, формы могут быть обработаны автоматически.

Базовый репозиторий рассчитан на работу только с одной сущностью.
Для создания репозитория, необходимо отнаследоваться от базового класса :py:class:`~flask_pony.repositories.PonyRepository`
и переопределить статическое свойство :py:attr:`~flask_pony.repositories.PonyRepository.entity_class`,
которое содержит ссылку на класс сущности.

.. code-block:: python

    # repositories.py

    from flask_pony.repositories import PonyRepository

    from .model import Category


    class CategoryRepository(PonyRepository):
        entity_class = Category


В репозитории можно инкапсулировать сложные запросы на выборку данных.
Репозиторий может работать с разным количеством типов сущностей, в зависимости от вашей задачи.
Имена репозиториев не обязательно должны совпадать с именами сущностей.

Другими словами, вы можете расширить базовый репозиторий любой нужной вам логикой
и затем использовать его в любом месте вашего веб приложения.

Если в сущности есть атрибуты с типом :py:class:`Set`,
то построитель форм не делает никаких предположений о том, как нужно отрисовать данное поле.
Пользователь сам решает, как и какие элементы формы, нужно создать, а так же сам пишет обработчик для этих полей.

.. _Repository: https://martinfowler.com/eaaCatalog/repository.html
.. _Data Mapper: https://martinfowler.com/eaaCatalog/dataMapper.html
